
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using NorthWind2023App.Models;
using NorthWind2023Library.Classes;
using NorthWind2023Library.Data.Configurations;
using NorthWind2023Library.Models;
using static ConfigurationLibrary.Classes.ConfigurationHelper;
using static Microsoft.EntityFrameworkCore.EF;
// ReSharper disable InconsistentNaming

#nullable disable

namespace NorthWind2023Library.Data;

public partial class Context : DbContext
{
    public Context()
    {
    }

    public Context(DbContextOptions<Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Categories> Categories { get; set; }

    public virtual DbSet<ContactDevices> ContactDevices { get; set; }

    public virtual DbSet<ContactType> ContactType { get; set; }

    public virtual DbSet<Contacts> Contacts { get; set; }

    public virtual DbSet<Countries> Countries { get; set; }

    public virtual DbSet<Customers> Customers { get; set; }

    public virtual DbSet<Employees> Employees { get; set; }

    public virtual DbSet<OrderDetails> OrderDetails { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<PhoneType> PhoneType { get; set; }

    public virtual DbSet<Products> Products { get; set; }

    public virtual DbSet<Region> Region { get; set; }

    public virtual DbSet<Shippers> Shippers { get; set; }

    public virtual DbSet<SupplierRegion> SupplierRegion { get; set; }

    public virtual DbSet<Suppliers> Suppliers { get; set; }

    public virtual DbSet<Territories> Territories { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder
            .UseSqlServer(ConnectionString())
            .EnableSensitiveDataLogging()
            .LogTo(new DbContextToFileLogger().Log, 
                new[]
                {
                    DbLoggerCategory.Database.Command.Name
                }, 
                LogLevel.Information);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new CategoriesConfiguration());
        modelBuilder.ApplyConfiguration(new ContactDevicesConfiguration());
        modelBuilder.ApplyConfiguration(new ContactTypeConfiguration());
        modelBuilder.ApplyConfiguration(new ContactsConfiguration());
        modelBuilder.ApplyConfiguration(new CountriesConfiguration());
        modelBuilder.ApplyConfiguration(new CustomersConfiguration());
        modelBuilder.ApplyConfiguration(new EmployeesConfiguration());
        modelBuilder.ApplyConfiguration(new OrderDetailsConfiguration());
        modelBuilder.ApplyConfiguration(new OrdersConfiguration());
        modelBuilder.ApplyConfiguration(new PhoneTypeConfiguration());
        modelBuilder.ApplyConfiguration(new ProductsConfiguration());
        modelBuilder.ApplyConfiguration(new RegionConfiguration());
        modelBuilder.ApplyConfiguration(new ShippersConfiguration());
        modelBuilder.ApplyConfiguration(new SupplierRegionConfiguration());
        modelBuilder.ApplyConfiguration(new SuppliersConfiguration());
        modelBuilder.ApplyConfiguration(new TerritoriesConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    #region Compile queries for multiple execution

    private static readonly Func<Context, int, Orders> _getOrder =
        CompileQuery((Context context, int orderIdentifier) =>
            context.Orders
                .Include(o => o.Employee)
                .Include(o => o.ShipViaNavigation)
                .Include(o => o.OrderDetails)
                .ThenInclude(od => od.Product)
                .ThenInclude(p => p.Category)
                .FirstOrDefault(o => o.OrderID == orderIdentifier));

    private static readonly Func<Context, int, Task<Orders>> _getOrderAsync =
        CompileAsyncQuery((Context context, int orderIdentifier) =>
            context.Orders
                .Include(o => o.Employee)
                .Include(o => o.ShipViaNavigation)
                .Include(o => o.OrderDetails)
                .ThenInclude(od => od.Product)
                .ThenInclude(p => p.Category)
                .FirstOrDefault(o => o.OrderID == orderIdentifier));

    public Orders GetOrder(int id) 
        => _getOrder(this, id);
    public async Task<Orders> GetOrderAsync(int id) 
        => await _getOrderAsync(this, id);

    #endregion
}
