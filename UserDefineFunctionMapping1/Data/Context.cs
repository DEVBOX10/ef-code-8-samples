// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using UserDefineFunctionMapping1.Models;
using static ConfigurationLibrary.Classes.ConfigurationHelper;
namespace UserDefineFunctionMapping1.Data;

public partial class Context : DbContext
{
    public Context()
    {
    }

    public Context(DbContextOptions<Context> options)
        : base(options)
    {
    }

    public virtual DbSet<ContactType> ContactType { get; set; }

    public virtual DbSet<Contacts> Contacts { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(ConnectionString()).LogTo(Console.WriteLine, LogLevel.Information);

    public string ConcatStrings(string prm1, string prm2)
        => throw new InvalidOperationException();
    public string ConcatStringsOptimized(string prm1, string prm2)
        => throw new InvalidOperationException();
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ContactType>(entity =>
        {
            entity.HasKey(e => e.ContactTypeIdentifier);
        });

        modelBuilder
            .HasDbFunction(typeof(Context).GetMethod(nameof(ConcatStrings), new[] { typeof(string), typeof(string) }))
            .HasName("ConcatStrings");

        modelBuilder.HasDbFunction(
            typeof(Context).GetMethod(nameof(ConcatStringsOptimized), new[] { typeof(string), typeof(string) }),
            b =>
            {
                b.HasName("ConcatStrings");
                b.HasParameter("prm1").PropagatesNullability();
                b.HasParameter("prm2").PropagatesNullability();
            });

        modelBuilder.Entity<Contacts>(entity =>
        {
            entity.HasKey(e => e.ContactId);

            entity.HasIndex(e => e.ContactTypeIdentifier, "IX_Contacts_ContactTypeIdentifier");

            entity.Property(e => e.ContactId).HasComment("Id");
            entity.Property(e => e.ContactTypeIdentifier).HasComment("Contact Type Identifier");
            entity.Property(e => e.FirstName).HasComment("First name");
            entity.Property(e => e.FullName)
                .HasComputedColumnSql("(([FirstName]+' ')+[LastName])", false)
                .HasComment("Full name");
            entity.Property(e => e.LastName).HasComment("Last name");

            entity.HasOne(d => d.ContactTypeIdentifierNavigation).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.ContactTypeIdentifier)
                .HasConstraintName("FK_Contacts_ContactType");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}